import numpy as np
import matplotlib.pyplot as plt
from pylab import mpl

# matplotlib没有中文字体，动态解决
plt.rcParams['font.sans-serif'] = ['Simhei']  # 显示中文
mpl.rcParams['axes.unicode_minus'] = False  # 解决保存图像是负号'-'显示为方块的问题
x_data = [338., 333., 328., 207., 226., 25., 179., 60., 208., 606.]
y_data = [640., 633., 619., 393., 428., 27., 193., 66., 226., 1591.]
x_d = np.asarray(x_data)  #asarray都可将结构数据转换为ndarray类型
y_d = np.asarray(y_data)
x = np.arange(-200, -100, 1)  #与meshgrid组成，主要是负责网格点画图。x,y为网格点的横纵坐标列向量（非矩阵）
y = np.arange(-5, 5, 0.1)
Z = np.zeros((len(x), len(y)))  #len返回字符串的长度，返回来一个给定形状和类型的用0填充的数组
X, Y = np.meshgrid(x, y) #生成网格点坐标矩阵,输入的x，y，就是网格点的横纵坐标列向量（非矩阵）
# loss
for i in range(len(x)):
    for j in range(len(y)):
        b = x[i]
        w = y[j]
        Z[j][i] = 0  # meshgrid吐出结果：y为行，x为列（这两步没看懂）
        for n in range(len(x_data)):
            Z[j][i] += (y_data[n] - b - w * x_data[n]) ** 2 #损失函数的定义
        Z[j][i] /= len(x_data)
# linear regression
#b = -120
#w = -4
b=-2
w=0.01
lr = 0.00001
iteration = 1400000

b_history = [b]
w_history = [w]
loss_history = []
import time
start = time.time()
for i in range(iteration):
    m = float(len(x_d))
    y_hat = w * x_d  +b
    loss = np.dot(y_d - y_hat, y_d - y_hat) / m #dot 矩阵点积在除以x_d长度的浮点数。因为公式损失函数为平方，所以可以弄成向量积
    grad_b = -2.0 * np.sum(y_d - y_hat) / m     #求导 L对b,sum为总和，笔记上有
    grad_w = -2.0 * np.dot(y_d - y_hat, x_d) / m
    # update param
    b -= lr * grad_b
    w -= lr * grad_w

    b_history.append(b) #b添加到末尾
    w_history.append(w)
    loss_history.append(loss)
    if i % 10000 == 0:
        print("Step %i, w: %0.4f, b: %.4f, Loss: %.4f" % (i, w, b, loss))#1000输出一下
end = time.time()
print("大约需要时间：",end-start)#时间函数
# plot the figure
plt.contourf(x, y, Z, 50, alpha=0.5, cmap=plt.get_cmap('jet'))  # 填充等高线
plt.plot([-188.4], [2.67], 'x', ms=12, mew=3, color="orange")
plt.plot(b_history, w_history, 'o-', ms=3, lw=1.5, color='black')
plt.xlim(-200, -100)
plt.ylim(-5, 5)
plt.xlabel(r'$b$')
plt.ylabel(r'$w$')
plt.title("线性回归")
plt.show()
